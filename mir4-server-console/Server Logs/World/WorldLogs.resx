<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AA/gAAAP+AAAP/+Af///gv///4f///////8=
</value>
  </data>
</root>